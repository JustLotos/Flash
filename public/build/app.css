
.navbar-link{
  color: white !important;
  text-decoration: none;
  font-size: 16px;
  vertical-align: middle;
}
.navbar-link--active {
  background-color: #479AEB;
}


.sidebar-link{
  color: white !important;
  text-decoration: none;
  font-size: 16px;
}


.bg[data-v-6af7225e]{
    background: #0c5460 url('/build/vbanner.jpg') no-repeat fixed center center;
}


.close-positioned {
  position: absolute;
  right: 0;
  top: 0;
  margin-top: 15px;
  margin-right: 30px;
}


.centered-input[data-v-54f6f0c9] input {
    text-align: center
}


.position-top[data-v-4e32b7d6]{
    position: absolute;
    bottom: 100%;
    left: 100%;
    margin-bottom: -100px;
    margin-left: -75px;
}
.card-description[data-v-4e32b7d6]{
    height: 54px;
}


.d-block[data-v-467b522a]{
    display: block;
}


.on-side[data-v-ee1fd0ba]{
    position: fixed;
    right: 7%;
    bottom: 12%;
    z-index: 10;
    padding: 0;
}
.on-card[data-v-ee1fd0ba]{
    position: absolute;
    z-index: 10;
    top: 50%;
    left: -30%;
    padding: 0;
}
.position-relative[data-v-ee1fd0ba]{
    position: relative;
}


.centered-input >>> input { text-align: center
}
.text--white { color: #FFFFFF !important
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/